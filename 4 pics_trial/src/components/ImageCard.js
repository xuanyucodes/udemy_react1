// to create a component that will figure out how large each image is, then adjust the grid-row-end property to accomodate that img size

import React from 'react';

class ImageCard extends React.Component {

    constructor(props) {
        super(props);
        this.state = {spans: 0};
        this.imageRef = React.createRef(); // how we create a reference. the instance variable is imageRef here, to be referred back later inside our class.
    }

    componentDidMount() { // remember cDM is called after thing gets rendered
        // cannot console.log immediately the clientHeight, because at that point in time, the images are still being downloaded, and will return 0 instead.
        // it seemingly works in Chrome but that is because when we press the arrow button to open the tree, it is only there and then that React is reading the clientHeight
        // when the DOM <img> tag is rendered, the real images from unsplash have not been downloaded yet! so must do this way:
        this.imageRef.current.addEventListener('load', this.setSpans);
    }

    setSpans = () => { // spans is basically the unit for grid-row-end
        const height = this.imageRef.current.clientHeight;
        const spans = Math.ceil(height/10);
        this.setState({spans}); // equivalent to {spans: spans}. es2015 allows this shortform.
    }


    render() {
        const {description, urls} = this.props.image; 

        // remember that the below is NOT DOM, but rather JSX. the ref system allows us to somehow get a handle on some particular DOM element that is generated by a tag outside the ref system; the ref system is how we get a handle a particular DOM element generated by a JSX tag.
        return (
            <div style={{gridRowEnd: `span ${this.state.spans}`}}>
                <img ref={this.imageRef} alt={description} src={urls.regular} />
            </div>
        );
    };
};

export default ImageCard;